TOP ?= $(TINYUSB_ROOT)
BOARD ?= portenta_c33

# run 
# python tools/get_deps.py ra
# once in the tinyusb root folder

include $(TOP)/examples/build_system/make/make.mk

INC += \
	src \
	$(TOP)/hw \

EXAMPLE_SOURCE += $(wildcard src/*.c)
FSP_SOURCE += $(TOP)/hw/mcu/renesas/fsp/ra/fsp/src/r_flash_hp/r_flash_hp.c $(TOP)/hw/mcu/renesas/fsp/ra/fsp/src/r_sci_i2c/r_sci_i2c.c
CFLAGS += -DFLASH_HP_CFG_CODE_FLASH_PROGRAMMING_ENABLE -DFLASH_HP_CFG_DATA_FLASH_PROGRAMMING_ENABLE
CFLAGS += -DUSB_PID=0x0368 -DBOARD_NAME=\"Portenta\ C33\"
CFLAGS += -DLED_FADE_PWM_OUT_A=1 -DLED_FADE_PWM_OUT_B=0 -DLED_FADE_PWM_CHANNEL=6 -DLED_TIMER_SOURCE_DIV=1
CFLAGS += -DLED_FADE_GPIO=BSP_IO_PORT_04_PIN_00
CFLAGS += -DUSE_HS_PORT_FOR_DFU
CFLAGS += -DOVERRIDE_VECTOR_TABLE=1
CFLAGS += -DDFU_LOADER
CFLAGS += -DCODE_FLASH_DESCRIPTOR=\"@CodeFlash\ /0x00000000/8*8Ka,63*32Kg\"
FSP_SOURCE += $(TOP)/hw/mcu/renesas/fsp/ra/fsp/src/r_gpt/r_gpt.c


SRC_C += $(addprefix $(CURRENT_PATH)/, $(EXAMPLE_SOURCE))
SRC_C += $(FSP_SOURCE)

CFLAGS += -Os -flto
CFLAGS += -ffunction-sections -fdata-sections
LDFLAGS += -Wl,--gc-sections -flto

CFLAGS += --warn-no-undef

include $(TOP)/examples/build_system/make/rules.mk

LD_FILE = $(FAMILY_PATH)/linker/gcc/$(MCU_VARIANT).ld

# --- JTAG flash helper ---
# Provide a `flash` target that uses a JTAG tool to program the bootloader
# Defaults to J-Link; can be overridden via environment variables.

# Path to image to flash (hex is fine for J-Link; use elf/bin as needed)
FLASH_IMAGE ?= $(BUILD)/$(PROJECT).hex

# Optional overrides
JLINK_DEVICE ?= RA6M5
JLINK_IF ?= SWD
JLINK_SPEED ?= 4000


.PHONY: flash
flash: $(FLASH_IMAGE)
	@bash -eu -o pipefail -c ' \
	  if command -v JLinkExe >/dev/null 2>&1; then \
	    echo "Using J-Link to flash $(FLASH_IMAGE)"; \
	    TMP=$(BUILD)/jlink_flash.jlink; \
	    echo "device $(JLINK_DEVICE)"            >  $$TMP; \
	    echo "si $(JLINK_IF)"                   >> $$TMP; \
	    echo "speed $(JLINK_SPEED)"             >> $$TMP; \
	    echo "r"                                >> $$TMP; \
	    echo "erase"                            >> $$TMP; \
	    echo "loadfile $(FLASH_IMAGE), 0x00000000" >> $$TMP; \
	    echo "r"                                >> $$TMP; \
	    echo "g"                                >> $$TMP; \
	    echo "q"                                >> $$TMP; \
	    ARGS="-NoGui 1"; \
	    if [ -n "${JLINK_SN:-}" ]; then ARGS="$$ARGS -SelectEmuBySN ${JLINK_SN}"; fi; \
	    JLinkExe $$ARGS -CommandFile $$TMP; \
	  elif command -v openocd >/dev/null 2>&1; then \
	    echo "OpenOCD found but no default RA6M5 target script in this repo."; \
	    echo "Please provide OPENOCD_CFG pointing to your interface+target .cfg files."; \
	    echo "Example: OPENOCD_CFG=\"-f interface/jlink.cfg -c 'transport select swd' -f target/ra6m5.cfg\""; \
	    echo "Then run: openocd $$OPENOCD_CFG -c \"program $(FLASH_IMAGE) 0x00000000 verify reset exit\""; \
	    exit 1; \
	  else \
	    echo "No JLinkExe or openocd found in PATH."; \
	    exit 1; \
	  fi'

.PHONY: flash_verify
flash_verify: $(FLASH_IMAGE)
	@bash -eu -o pipefail -c ' \
	  if command -v JLinkExe >/dev/null 2>&1; then \
	    BIN=$(BUILD)/$(PROJECT).bin; \
	    SIZE=$(shell stat -c%s _build/portenta_c33/$(PROJECT).bin 2>/dev/null || echo 0); \
	    if [ $$SIZE -le 0 ]; then echo "Binary size unknown; build first."; exit 1; fi; \
	    TMP=$(BUILD)/jlink_flash_verify.jlink; \
	    echo "exitonerror 1"                      >  $$TMP; \
	    echo "device $(JLINK_DEVICE)"            >> $$TMP; \
	    echo "si $(JLINK_IF)"                   >> $$TMP; \
	    echo "speed $(JLINK_SPEED)"             >> $$TMP; \
	    echo "connect"                           >> $$TMP; \
	    echo "r"                                >> $$TMP; \
	    echo "erase"                            >> $$TMP; \
	    echo "SetVerify Download"               >> $$TMP; \
	    echo "loadfile $(FLASH_IMAGE), 0x00000000" >> $$TMP; \
	    echo "verify $(FLASH_IMAGE), 0x00000000"   >> $$TMP; \
	    echo "savebin $(BUILD)/readback.bin, 0x00000000, $$SIZE" >> $$TMP; \
	    echo "r"                                >> $$TMP; \
	    echo "g"                                >> $$TMP; \
	    echo "q"                                >> $$TMP; \
	    ARGS="-NoGui 1"; \
	    if [ -n "${JLINK_SN:-}" ]; then ARGS="$$ARGS -SelectEmuBySN ${JLINK_SN}"; fi; \
	    /usr/bin/timeout 60s JLinkExe $$ARGS -CommandFile $$TMP || true; \
	    if [ -f $(BUILD)/readback.bin ]; then \
	      sha256sum $$BIN $(BUILD)/readback.bin; \
	      cmp -n $$SIZE $$BIN $(BUILD)/readback.bin; \
	    else \
	      echo "Readback not created; flash likely failed."; exit 2; \
	    fi; \
	  else \
	    echo "JLinkExe not found."; exit 127; \
	  fi'
